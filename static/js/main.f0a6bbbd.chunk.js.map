{"version":3,"sources":["components/Todos.js","components/AddForm.js","App.js","serviceWorker.js","index.js"],"names":["Todos","_ref","todos","deleteTodo","completeTodo","todoList","length","map","todo","react_default","a","createElement","style","display","justifyContent","className","key","id","textDecoration","isCompleted","marginTop","fontSize","fontWeight","cursor","onClick","content","Button","variant","color","AddTodo","state","handleChange","e","_this","setState","target","value","handleSubmit","preventDefault","props","addTodo","onSubmit","this","type","onChange","Component","App","completed","filter","Math","random","concat","Object","toConsumableArray","components_Todos","AddForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAuDeA,EA7CD,SAAAC,GAAyC,IAAtCC,EAAsCD,EAAtCC,MAAOC,EAA+BF,EAA/BE,WAAYC,EAAmBH,EAAnBG,aAC5BC,EAAWH,EAAMI,OACrBJ,EAAMK,IAAI,SAAAC,GACR,OACEC,EAAAC,EAAAC,cAAA,OACEC,MAAO,CAAEC,QAAS,OAAQC,eAAgB,iBAC1CC,UAAU,kBACVC,IAAKR,EAAKS,IAEVR,EAAAC,EAAAC,cAAA,QACEC,MAAO,CACLM,eAAgBV,EAAKW,YAAc,eAAiB,OACpDC,UAAW,MACXC,SAAU,OACVC,WAAY,MACZC,OAAQ,WAEVC,QAAS,WACPpB,EAAaI,EAAKS,MAGnBT,EAAKiB,SAGRhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACEF,QAAS,WACPrB,EAAWK,EAAKS,KAElBU,QAAQ,WACRC,MAAM,aALR,aAaNnB,EAAAC,EAAAC,cAAA,KAAGC,MAAO,CAAES,SAAU,QAAUN,UAAU,UAA1C,kCAKF,OAAON,EAAAC,EAAAC,cAAA,OAAKI,UAAU,oBAAoBV,ICjB7BwB,6MAhCbC,MAAQ,CACNL,QAAS,MAEXM,aAAe,SAAAC,GACbC,EAAKC,SAAS,CACZT,QAASO,EAAEG,OAAOC,WAGtBC,aAAe,SAAAL,GACbA,EAAEM,iBACFL,EAAKM,MAAMC,QAAQP,EAAKH,OACxBG,EAAKC,SAAS,CACZT,QAAS,8EAKX,OACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAM8B,SAAUC,KAAKL,cACnB5B,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,SACEgC,KAAK,OACLC,SAAUF,KAAKX,aACfK,MAAOM,KAAKZ,MAAML,mBAzBRoB,aCkEPC,6MA/DbhB,MAAQ,CACN5B,MAAO,CACL,CACEuB,QAAS,gBACTR,GAAI,EACJ8B,WAAW,GAEb,CACEtB,QAAS,gBACTR,GAAI,EACJ8B,WAAW,GAEb,CACEtB,QAAS,kBACTR,GAAI,EACJE,aAAa,OAKnBhB,WAAa,SAAAc,GACX,IAAMf,EAAQ+B,EAAKH,MAAM5B,MAAM8C,OAAO,SAAAxC,GACpC,OAAOA,EAAKS,KAAOA,IAErBgB,EAAKC,SAAS,CACZhC,MAAOA,OAIXsC,QAAU,SAAAhC,GACRA,EAAKS,GAAKgC,KAAKC,SACf,IAAMhD,EAAK,GAAAiD,OAAAC,OAAAC,EAAA,EAAAD,CAAOnB,EAAKH,MAAM5B,OAAlB,CAAyBM,IACpCyB,EAAKC,SAAS,CACZhC,MAAOA,OAIXE,aAAe,SAAAa,GACbgB,EAAKC,SAAS,CACZhC,MAAO+B,EAAKH,MAAM5B,MAAMK,IAAI,SAAAC,GAI1B,OAHIA,EAAKS,KAAOA,IACdT,EAAKW,aAAeX,EAAKW,aAEpBX,+EAMX,OACEC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,qBACbN,EAAAC,EAAAC,cAAA,MAAII,UAAU,oBAAd,WACAN,EAAAC,EAAAC,cAAC2C,EAAD,CACEpD,MAAOwC,KAAKZ,MAAM5B,MAClBC,WAAYuC,KAAKvC,WACjBC,aAAcsC,KAAKtC,eAErBK,EAAAC,EAAAC,cAAC4C,EAAD,CAASf,QAASE,KAAKF,kBA1DbK,aCQEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f0a6bbbd.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\n\n// This is only a functionnal component\n// we dont need state inside , just created\n// to render and use the state inside App.js\n\n// we need to pass todos from App.js component\n// to Todos component, so we have to pass props\n\nconst Todos = ({ todos, deleteTodo, completeTodo }) => {\n  const todoList = todos.length ? (\n    todos.map(todo => {\n      return (\n        <div\n          style={{ display: 'flex', justifyContent: 'space-between' }}\n          className=\"collection-item\"\n          key={todo.id}\n        >\n          <span\n            style={{\n              textDecoration: todo.isCompleted ? 'line-through' : 'none',\n              marginTop: '6px',\n              fontSize: '15px',\n              fontWeight: '400',\n              cursor: 'pointer'\n            }}\n            onClick={() => {\n              completeTodo(todo.id);\n            }}\n          >\n            {todo.content}\n          </span>\n\n          <Button\n            onClick={() => {\n              deleteTodo(todo.id);\n            }}\n            variant=\"outlined\"\n            color=\"secondary\"\n          >\n            Delete\n          </Button>\n        </div>\n      );\n    })\n  ) : (\n    <p style={{ fontSize: '16px' }} className=\"center\">\n      There is nothing to do today !\n    </p>\n  );\n\n  return <div className=\"todos collection\">{todoList}</div>;\n};\n\nexport default Todos;\n","import React, { Component } from 'react';\n\nclass AddTodo extends Component {\n  state = {\n    content: ''\n  };\n  handleChange = e => {\n    this.setState({\n      content: e.target.value\n    });\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.addTodo(this.state);\n    this.setState({\n      content: ''\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <label>Add a new todo:</label>\n          <input\n            type=\"text\"\n            onChange={this.handleChange}\n            value={this.state.content}\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default AddTodo;\n","import React, { Component } from 'react';\nimport Todos from './components/Todos';\nimport AddTodo from './components/AddForm';\n\nclass App extends Component {\n  state = {\n    todos: [\n      {\n        content: 'Buy a new Jet',\n        id: 1,\n        completed: false\n      },\n      {\n        content: 'Buy a new Car',\n        id: 2,\n        completed: false\n      },\n      {\n        content: 'Buy a new house',\n        id: 3,\n        isCompleted: false\n      }\n    ]\n  };\n\n  deleteTodo = id => {\n    const todos = this.state.todos.filter(todo => {\n      return todo.id !== id;\n    });\n    this.setState({\n      todos: todos\n    });\n  };\n\n  addTodo = todo => {\n    todo.id = Math.random();\n    const todos = [...this.state.todos, todo];\n    this.setState({\n      todos: todos\n    });\n  };\n\n  completeTodo = id => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if (todo.id === id) {\n          todo.isCompleted = !todo.isCompleted;\n        }\n        return todo;\n      })\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"TodoApp container\">\n        <h1 className=\"center blue-text\">TodoApp</h1>\n        <Todos\n          todos={this.state.todos}\n          deleteTodo={this.deleteTodo}\n          completeTodo={this.completeTodo}\n        />\n        <AddTodo addTodo={this.addTodo} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}